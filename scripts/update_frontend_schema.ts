#!/usr/bin/env ts-node
import * as path from "path";
import {glob} from "glob";
import {compileFromFile} from "json-schema-to-typescript";
import {promises as fsp} from "fs";

async function main() {
	const schemaFiles = await glob("../contracts/**/schema/raw/*.json", {cwd: __dirname});
	await fsp.rm(path.resolve(__dirname, "../frontend/src/ts/contract_schema"), {recursive: true, force: true})
	
	for (let i = 0; i < schemaFiles.length; i += 1) {
		const contractName = schemaFiles[i].match(/^\.\.\/contracts\/(.*?)\//)![1];
		const schemaFile = path.resolve(__dirname, schemaFiles[i]);
		console.log("Process", schemaFile);

		let outputDir = path.resolve(__dirname, "../frontend/src/ts/contract_schema", contractName);
		let outputFileName = path.basename(schemaFile, ".json") + ".ts";
		if (outputFileName.startsWith("response_to_")) {
			outputFileName = outputFileName.substring("response_to_".length);
			outputDir = path.resolve(outputDir, "responses");
		}
		await fsp.mkdir(outputDir, {recursive: true});
		const autogenCode = await compileFromFile(schemaFile, {bannerComment: `\
			/**
			 * DO NOT EDIT YOURSELF!
			 * This file was automatically generated by json-schema-to-typescript.
			 * The source schema json was automatically generated by cosmwasm-schema during the contract build.
			 * The Rust code is the source of truth! Re-run the whole build if this file is outdated.
			 **/
		`});
		await fsp.writeFile(path.resolve(outputDir, outputFileName), autogenCode);
	}
	/*
	await Promise.all(
		schemaFiles.map(async (schemaFile) => {
			
		})
	);
	*/
	/*
	for (let i = 0; i < schemaFiles.length; i += 1) {
		const schemaFile = path.resolve(__dirname, schemaFiles[i]);
		console.log("Process", schemaFile);
		const schemaBaseName = path.basename(schemaFile, ".json");
		const autogenCode = await compileFromFile(schemaFile);
		await fsp.writeFile(path.resolve(__dirname, "../frontend/src/ts/contract_schema/" + schemaBaseName + ".ts"), autogenCode)
	}
	console.log("Contract Schemas typescriptified.")
	*/
}
(async () => {
	try {
		await main();
	}catch(ex: any) {
		console.error(ex);
		process.exitCode = 1;
	}
})();
