// auto-generated by acetewm
// DO NOT EDIT BY HAND!!
export class SwapComponentSlots {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _title?: HTMLSpanElement;
	get title() {
		if (this._title === undefined) {
			this._title = this._element.querySelector("[slot=\"title\"]") ?? document.createElement("span");
			this._title.slot = "title";
			this._element.appendChild(this._title);
		}
		return this._title;
	}
}
export class SwapComponentRefs {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _tradeInput?: HTMLFormElementKnownControls<SwapComponentFormCollection1, SwapComponentFormValues1>;
	get tradeInput() {
		if (this._tradeInput === undefined) {
			this._tradeInput = this._element.shadowRoot!.querySelector("[ace-ref=\"trade-input\"]")!;
			this._tradeInput.values = normalizeFormValues.bind(this._tradeInput, this._tradeInput);
		}
		return this._tradeInput;
	}
}
export class SwapComponentAutogen extends HTMLElement {
	readonly slots: SwapComponentSlots;
	readonly refs: SwapComponentRefs;
	constructor() {
		super();
		const shadowRoot = this.attachShadow({ mode: "open" });
		shadowRoot.appendChild(
			(document.getElementById("ace-template-swap-component") as HTMLTemplateElement)
				.content
				.cloneNode(true)
		);
		this.slots = new SwapComponentSlots(this);
		this.refs = new SwapComponentRefs(this);
	}
	public static registerElement() {
		customElements.define("swap-component", this);
	}
}
export type SwapComponentFormCollection1 = HTMLFormControlsCollection & {
	"test": HTMLInputElement;
	namedItem(name: "test"): HTMLInputElement;
};
export type SwapComponentFormValues1 = {
	"test": string;
};
interface HTMLFormElementKnownControls<C extends HTMLFormControlsCollection, V> extends HTMLFormElement {
	readonly elements: C;
	values: () => V;
};

// TODO: Make this part of a util lib instead of part of the autogen
export function normalizeFormValues(source: HTMLFormElement | SubmitEvent): any {
	const result: any = {};
	const [formElement, submitter] = (() => {
		if (source instanceof HTMLFormElement) {
			return [source, null];
		}
		return [source.target as HTMLFormElement, source.submitter];
	})();
	for (let i = 0; i < formElement.elements.length; i += 1) {
		const formControl = formElement.elements[i];
		if (formControl instanceof HTMLButtonElement) {
			if (formControl == submitter) {
				if (formControl.name) {
					result[formControl.name] = formControl.value;
				}
			}
		}else if (formControl instanceof HTMLInputElement) {
			switch(formControl.type) {
				case "checkbox": {
					result[formControl.name] = formControl.checked;
					break;
				}
				case "datetime-local": {
					result[formControl.name] = formControl.valueAsDate;
					break;
				}
				case "file": {
					result[formControl.name] = formControl.files;
					break;
				}
				case "number":
				case "range": {
					result[formControl.name] = formControl.valueAsNumber;
					break;
				}
				case "radio": {
					if (formControl.checked) {
						result[formControl.name] = formControl.value;
						break;
					}
				}
				default:
					result[formControl.name] = formControl.value;
			}
		}else if (
			formControl instanceof HTMLOutputElement ||
			formControl instanceof HTMLSelectElement ||
			formControl instanceof HTMLTextAreaElement
		) {
			result[formControl.name] = formControl.value;
		}
	}
	return result;
}
