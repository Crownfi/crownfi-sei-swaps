/**
 * DO NOT EDIT YOURSELF!
 * This file was automatically generated by json-schema-to-typescript.
 * The source schema json was automatically generated by cosmwasm-schema during the contract build.
 * The Rust code is the source of truth! Re-run the whole build if this file is outdated.
 **/

/**
 * This structure describes the available query messages for the factory contract.
 */
export type QueryMsg =
  | {
      config: {};
    }
  | {
      pair: {
        /**
         * The assets for which we return a pair
         */
        asset_infos: AssetInfo[];
      };
    }
  | {
      pairs: {
        /**
         * The number of pairs to read and return. It is an [`Option`] type.
         */
        limit?: number | null;
        /**
         * The pair item to start reading from. It is an [`Option`] type that accepts [`AssetInfo`] elements.
         */
        start_after?: AssetInfo[] | null;
      };
    }
  | {
      fee_info: {
        /**
         * The pair type for which we return fee information. Pair type is a [`PairType`] struct
         */
        pair_type: PairType;
      };
    }
  | {
      blacklisted_pair_types: {};
    };
/**
 * This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked("stake...") }; NativeToken { denom: String::from("uluna") }; ```
 */
export type AssetInfo =
  | {
      token: {
        contract_addr: Addr;
      };
    }
  | {
      native_token: {
        denom: string;
      };
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * This enum describes available pair types. ## Available pool types ``` # use astroport::factory::PairType::{Custom, Stable, Xyk}; Xyk {}; Stable {}; Custom(String::from("Custom")); ```
 */
export type PairType =
  | {
      xyk: {};
    }
  | {
      stable: {};
    }
  | {
      custom: string;
    };
