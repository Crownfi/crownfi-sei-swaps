// auto-generated by acetewm
// DO NOT EDIT BY HAND!!
export class PopupModalRefs {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _heading?: HTMLHeadingElement;
	get heading() {
		if (this._heading === undefined) {
			this._heading = this._element.querySelector("[ace-ref=\"heading\"]:not(:not(:scope)[is] *)")!;
		}
		return this._heading;
	}
	private _message?: HTMLParagraphElement;
	get message() {
		if (this._message === undefined) {
			this._message = this._element.querySelector("[ace-ref=\"message\"]:not(:not(:scope)[is] *)")!;
		}
		return this._message;
	}
	private _dismissBtn?: HTMLButtonElement;
	get dismissBtn() {
		if (this._dismissBtn === undefined) {
			this._dismissBtn = this._element.querySelector("[ace-ref=\"dismiss-btn\"]:not(:not(:scope)[is] *)")!;
		}
		return this._dismissBtn;
	}
}
export class PopupModalAutogen extends HTMLDialogElement {
	readonly refs: PopupModalRefs;
	static get observedAttributes() {
		return ["message", "heading"];
	}
	private _attributeMessageValue: string | null = null;
	get message(): string | null {
		return this._attributeMessageValue;
	}
	set message(v: string | null) {
		if (v == null) {
			this.removeAttribute("message");
		}else{
			this.setAttribute("message", v);
		}
	}
	protected onMessageChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	private _attributeHeadingValue: string | null = null;
	get heading(): string | null {
		return this._attributeHeadingValue;
	}
	set heading(v: string | null) {
		if (v == null) {
			this.removeAttribute("heading");
		}else{
			this.setAttribute("heading", v);
		}
	}
	protected onHeadingChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "message":
				this._attributeMessageValue = newValue;
				this.onMessageChanged(oldValue, newValue);
				break;
			case "heading":
				this._attributeHeadingValue = newValue;
				this.onHeadingChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				(document.getElementById("ace-template-popup-modal") as HTMLTemplateElement)
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "popup-modal"); // allow for easy query selecting
		this.refs = new PopupModalRefs(this);
	}
	public static registerElement() {
		customElements.define("popup-modal", this, { extends: "dialog"});
	}
}
export class ErrorModalRefs {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _heading?: HTMLHeadingElement;
	get heading() {
		if (this._heading === undefined) {
			this._heading = this._element.querySelector("[ace-ref=\"heading\"]:not(:not(:scope)[is] *)")!;
		}
		return this._heading;
	}
	private _message?: HTMLParagraphElement;
	get message() {
		if (this._message === undefined) {
			this._message = this._element.querySelector("[ace-ref=\"message\"]:not(:not(:scope)[is] *)")!;
		}
		return this._message;
	}
	private _errorDetails?: HTMLTextAreaElement;
	get errorDetails() {
		if (this._errorDetails === undefined) {
			this._errorDetails = this._element.querySelector("[ace-ref=\"error-details\"]:not(:not(:scope)[is] *)")!;
		}
		return this._errorDetails;
	}
	private _dismissBtn?: HTMLButtonElement;
	get dismissBtn() {
		if (this._dismissBtn === undefined) {
			this._dismissBtn = this._element.querySelector("[ace-ref=\"dismiss-btn\"]:not(:not(:scope)[is] *)")!;
		}
		return this._dismissBtn;
	}
}
export class ErrorModalAutogen extends HTMLDialogElement {
	readonly refs: ErrorModalRefs;
	static get observedAttributes() {
		return ["heading", "message", "details"];
	}
	private _attributeHeadingValue: string | null = null;
	get heading(): string | null {
		return this._attributeHeadingValue;
	}
	set heading(v: string | null) {
		if (v == null) {
			this.removeAttribute("heading");
		}else{
			this.setAttribute("heading", v);
		}
	}
	protected onHeadingChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	private _attributeMessageValue: string | null = null;
	get message(): string | null {
		return this._attributeMessageValue;
	}
	set message(v: string | null) {
		if (v == null) {
			this.removeAttribute("message");
		}else{
			this.setAttribute("message", v);
		}
	}
	protected onMessageChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	private _attributeDetailsValue: string | null = null;
	get details(): string | null {
		return this._attributeDetailsValue;
	}
	set details(v: string | null) {
		if (v == null) {
			this.removeAttribute("details");
		}else{
			this.setAttribute("details", v);
		}
	}
	protected onDetailsChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "heading":
				this._attributeHeadingValue = newValue;
				this.onHeadingChanged(oldValue, newValue);
				break;
			case "message":
				this._attributeMessageValue = newValue;
				this.onMessageChanged(oldValue, newValue);
				break;
			case "details":
				this._attributeDetailsValue = newValue;
				this.onDetailsChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				(document.getElementById("ace-template-error-modal") as HTMLTemplateElement)
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "error-modal"); // allow for easy query selecting
		this.refs = new ErrorModalRefs(this);
	}
	public static registerElement() {
		customElements.define("error-modal", this, { extends: "dialog"});
	}
}
