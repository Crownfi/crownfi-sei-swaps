// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
export class WalletButtonRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
}
let _templateWalletButton: HTMLTemplateElement | null = null;
function getWalletButtonTemplate(): HTMLTemplateElement {
	if (_templateWalletButton == null) {
		 _templateWalletButton = document.getElementById("cewt-template-wallet-button") as HTMLTemplateElement;
	}
	return _templateWalletButton;
}
export class WalletButtonAutogen extends HTMLButtonElement {
	readonly refs: WalletButtonRefs;
	static get observedAttributes() {
		return ["wallet-address"];
	}
	#attributeWalletAddressValue: string | null = null;
	get walletAddress(): string | null {
		return this.#attributeWalletAddressValue;
	}
	set walletAddress(v: string | null) {
		if (v == null) {
			this.removeAttribute("wallet-address");
		}else{
			this.setAttribute("wallet-address", v);
		}
	}
	protected onWalletAddressChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "wallet-address":
				this.#attributeWalletAddressValue = newValue;
				this.onWalletAddressChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getWalletButtonTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "wallet-button"); // allow for easy query selecting
		this.refs = new WalletButtonRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("wallet-button", this, { extends: "button"});
	}
}
export class WalletChoiceRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#img?: HTMLImageElement;
	get img() {
		if (this.#img === undefined) {
			this.#img = this.#element.querySelector("[cewt-ref=\"img\"]:not(:scope [is] *)")!;
		}
		return this.#img;
	}
	#text?: HTMLSpanElement;
	get text() {
		if (this.#text === undefined) {
			this.#text = this.#element.querySelector("[cewt-ref=\"text\"]:not(:scope [is] *)")!;
		}
		return this.#text;
	}
}
let _templateWalletChoice: HTMLTemplateElement | null = null;
function getWalletChoiceTemplate(): HTMLTemplateElement {
	if (_templateWalletChoice == null) {
		 _templateWalletChoice = document.getElementById("cewt-template-wallet-choice") as HTMLTemplateElement;
	}
	return _templateWalletChoice;
}
export class WalletChoiceAutogen extends HTMLButtonElement {
	readonly refs: WalletChoiceRefs;
	static get observedAttributes() {
		return ["icon", "text"];
	}
	#attributeIconValue: string | null = null;
	get icon(): string | null {
		return this.#attributeIconValue;
	}
	set icon(v: string | null) {
		if (v == null) {
			this.removeAttribute("icon");
		}else{
			this.setAttribute("icon", v);
		}
	}
	protected onIconChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeTextValue: string | null = null;
	get text(): string | null {
		return this.#attributeTextValue;
	}
	set text(v: string | null) {
		if (v == null) {
			this.removeAttribute("text");
		}else{
			this.setAttribute("text", v);
		}
	}
	protected onTextChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "icon":
				this.#attributeIconValue = newValue;
				this.onIconChanged(oldValue, newValue);
				break;
			case "text":
				this.#attributeTextValue = newValue;
				this.onTextChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getWalletChoiceTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "wallet-choice"); // allow for easy query selecting
		this.refs = new WalletChoiceRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("wallet-choice", this, { extends: "button"});
	}
}
export class WalletModalRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#heading?: HTMLHeadingElement;
	get heading() {
		if (this.#heading === undefined) {
			this.#heading = this.#element.querySelector("[cewt-ref=\"heading\"]:not(:scope [is] *)")!;
		}
		return this.#heading;
	}
	#selectedNetwork?: HTMLSelectElement;
	get selectedNetwork() {
		if (this.#selectedNetwork === undefined) {
			this.#selectedNetwork = this.#element.querySelector("[cewt-ref=\"selected-network\"]:not(:scope [is] *)")!;
		}
		return this.#selectedNetwork;
	}
	#choices?: HTMLDivElement;
	get choices() {
		if (this.#choices === undefined) {
			this.#choices = this.#element.querySelector("[cewt-ref=\"choices\"]:not(:scope [is] *)")!;
		}
		return this.#choices;
	}
	#cancelButton?: HTMLButtonElement;
	get cancelButton() {
		if (this.#cancelButton === undefined) {
			this.#cancelButton = this.#element.querySelector("[cewt-ref=\"cancel-button\"]:not(:scope [is] *)")!;
		}
		return this.#cancelButton;
	}
}
let _templateWalletModal: HTMLTemplateElement | null = null;
function getWalletModalTemplate(): HTMLTemplateElement {
	if (_templateWalletModal == null) {
		 _templateWalletModal = document.getElementById("cewt-template-wallet-modal") as HTMLTemplateElement;
	}
	return _templateWalletModal;
}
export class WalletModalAutogen extends HTMLDialogElement {
	readonly refs: WalletModalRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getWalletModalTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "wallet-modal"); // allow for easy query selecting
		this.refs = new WalletModalRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("wallet-modal", this, { extends: "dialog"});
	}
}
