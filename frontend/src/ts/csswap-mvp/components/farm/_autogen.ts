// auto-generated by acetewm
// DO NOT EDIT BY HAND!!
export class FarmPoolComponentRefs {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _bigChestTvl?: HTMLSpanElement;
	get bigChestTvl() {
		if (this._bigChestTvl === undefined) {
			this._bigChestTvl = this._element.querySelector("[ace-ref=\"big-chest-tvl\"]:not(:not(:scope)[is] *)")!;
		}
		return this._bigChestTvl;
	}
	private _bigChestTotalTraded?: HTMLSpanElement;
	get bigChestTotalTraded() {
		if (this._bigChestTotalTraded === undefined) {
			this._bigChestTotalTraded = this._element.querySelector("[ace-ref=\"big-chest-total-traded\"]:not(:not(:scope)[is] *)")!;
		}
		return this._bigChestTotalTraded;
	}
	private _bigChestVolume24H?: HTMLSpanElement;
	get bigChestVolume24H() {
		if (this._bigChestVolume24H === undefined) {
			this._bigChestVolume24H = this._element.querySelector("[ace-ref=\"big-chest-volume-24h\"]:not(:not(:scope)[is] *)")!;
		}
		return this._bigChestVolume24H;
	}
	private _allPoolBtn?: HTMLButtonElement;
	get allPoolBtn() {
		if (this._allPoolBtn === undefined) {
			this._allPoolBtn = this._element.querySelector("[ace-ref=\"all-pool-btn\"]:not(:not(:scope)[is] *)")!;
		}
		return this._allPoolBtn;
	}
	private _myPoolBtn?: HTMLButtonElement;
	get myPoolBtn() {
		if (this._myPoolBtn === undefined) {
			this._myPoolBtn = this._element.querySelector("[ace-ref=\"my-pool-btn\"]:not(:not(:scope)[is] *)")!;
		}
		return this._myPoolBtn;
	}
	private _poolSearchText?: HTMLInputElement;
	get poolSearchText() {
		if (this._poolSearchText === undefined) {
			this._poolSearchText = this._element.querySelector("[ace-ref=\"pool-search-text\"]:not(:not(:scope)[is] *)")!;
		}
		return this._poolSearchText;
	}
}
export class FarmPoolComponentAutogen extends HTMLDivElement {
	readonly refs: FarmPoolComponentRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				(document.getElementById("ace-template-farm-pool-component") as HTMLTemplateElement)
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "farm-pool-component"); // allow for easy query selecting
		this.refs = new FarmPoolComponentRefs(this);
	}
	public static registerElement() {
		customElements.define("farm-pool-component", this, { extends: "div"});
	}
}
export class FarmPoolStatsRefs {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _title?: HTMLDivElement;
	get title() {
		if (this._title === undefined) {
			this._title = this._element.querySelector("[ace-ref=\"title\"]:not(:not(:scope)[is] *)")!;
		}
		return this._title;
	}
	private _liquidity?: HTMLDivElement;
	get liquidity() {
		if (this._liquidity === undefined) {
			this._liquidity = this._element.querySelector("[ace-ref=\"liquidity\"]:not(:not(:scope)[is] *)")!;
		}
		return this._liquidity;
	}
	private _volume24H?: HTMLDivElement;
	get volume24H() {
		if (this._volume24H === undefined) {
			this._volume24H = this._element.querySelector("[ace-ref=\"volume-24h\"]:not(:not(:scope)[is] *)")!;
		}
		return this._volume24H;
	}
	private _apy?: HTMLDivElement;
	get apy() {
		if (this._apy === undefined) {
			this._apy = this._element.querySelector("[ace-ref=\"apy\"]:not(:not(:scope)[is] *)")!;
		}
		return this._apy;
	}
	private _deposits?: HTMLDivElement;
	get deposits() {
		if (this._deposits === undefined) {
			this._deposits = this._element.querySelector("[ace-ref=\"deposits\"]:not(:not(:scope)[is] *)")!;
		}
		return this._deposits;
	}
	private _feeRate?: HTMLDivElement;
	get feeRate() {
		if (this._feeRate === undefined) {
			this._feeRate = this._element.querySelector("[ace-ref=\"fee-rate\"]:not(:not(:scope)[is] *)")!;
		}
		return this._feeRate;
	}
	private _rewards?: HTMLDivElement;
	get rewards() {
		if (this._rewards === undefined) {
			this._rewards = this._element.querySelector("[ace-ref=\"rewards\"]:not(:not(:scope)[is] *)")!;
		}
		return this._rewards;
	}
}
export class FarmPoolStatsAutogen extends HTMLDivElement {
	readonly refs: FarmPoolStatsRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				(document.getElementById("ace-template-farm-pool-stats") as HTMLTemplateElement)
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "farm-pool-stats"); // allow for easy query selecting
		this.refs = new FarmPoolStatsRefs(this);
	}
	public static registerElement() {
		customElements.define("farm-pool-stats", this, { extends: "div"});
	}
}
export class FarmPoolInteractRefs {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _depositTxt?: HTMLSpanElement;
	get depositTxt() {
		if (this._depositTxt === undefined) {
			this._depositTxt = this._element.querySelector("[ace-ref=\"deposit-txt\"]:not(:not(:scope)[is] *)")!;
		}
		return this._depositTxt;
	}
	private _depositBtn?: HTMLButtonElement;
	get depositBtn() {
		if (this._depositBtn === undefined) {
			this._depositBtn = this._element.querySelector("[ace-ref=\"deposit-btn\"]:not(:not(:scope)[is] *)")!;
		}
		return this._depositBtn;
	}
	private _withdrawTxt?: HTMLSpanElement;
	get withdrawTxt() {
		if (this._withdrawTxt === undefined) {
			this._withdrawTxt = this._element.querySelector("[ace-ref=\"withdraw-txt\"]:not(:not(:scope)[is] *)")!;
		}
		return this._withdrawTxt;
	}
	private _withdrawBtn?: HTMLButtonElement;
	get withdrawBtn() {
		if (this._withdrawBtn === undefined) {
			this._withdrawBtn = this._element.querySelector("[ace-ref=\"withdraw-btn\"]:not(:not(:scope)[is] *)")!;
		}
		return this._withdrawBtn;
	}
	private _claimTxt?: HTMLSpanElement;
	get claimTxt() {
		if (this._claimTxt === undefined) {
			this._claimTxt = this._element.querySelector("[ace-ref=\"claim-txt\"]:not(:not(:scope)[is] *)")!;
		}
		return this._claimTxt;
	}
	private _claimBtn?: HTMLButtonElement;
	get claimBtn() {
		if (this._claimBtn === undefined) {
			this._claimBtn = this._element.querySelector("[ace-ref=\"claim-btn\"]:not(:not(:scope)[is] *)")!;
		}
		return this._claimBtn;
	}
}
export class FarmPoolInteractAutogen extends HTMLDivElement {
	readonly refs: FarmPoolInteractRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				(document.getElementById("ace-template-farm-pool-interact") as HTMLTemplateElement)
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "farm-pool-interact"); // allow for easy query selecting
		this.refs = new FarmPoolInteractRefs(this);
	}
	public static registerElement() {
		customElements.define("farm-pool-interact", this, { extends: "div"});
	}
}
export class FarmPoolDepositDialogRefs {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _formDeposit?: HTMLFormElementKnownControls<FarmPoolDepositDialogFormCollection1, FarmPoolDepositDialogFormValues1>;
	get formDeposit() {
		if (this._formDeposit === undefined) {
			this._formDeposit = this._element.querySelector("[ace-ref=\"form-deposit\"]:not(:not(:scope)[is] *)")!;
			this._formDeposit.values = normalizeFormValues.bind(this._formDeposit, this._formDeposit);
		}
		return this._formDeposit;
	}
	private _denomToken0?: HTMLSpanElement;
	get denomToken0() {
		if (this._denomToken0 === undefined) {
			this._denomToken0 = this._element.querySelector("[ace-ref=\"denom-token0\"]:not(:not(:scope)[is] *)")!;
		}
		return this._denomToken0;
	}
	private _balanceToken0?: HTMLSpanElement;
	get balanceToken0() {
		if (this._balanceToken0 === undefined) {
			this._balanceToken0 = this._element.querySelector("[ace-ref=\"balance-token0\"]:not(:not(:scope)[is] *)")!;
		}
		return this._balanceToken0;
	}
	private _denomToken1?: HTMLSpanElement;
	get denomToken1() {
		if (this._denomToken1 === undefined) {
			this._denomToken1 = this._element.querySelector("[ace-ref=\"denom-token1\"]:not(:not(:scope)[is] *)")!;
		}
		return this._denomToken1;
	}
	private _balanceToken1?: HTMLSpanElement;
	get balanceToken1() {
		if (this._balanceToken1 === undefined) {
			this._balanceToken1 = this._element.querySelector("[ace-ref=\"balance-token1\"]:not(:not(:scope)[is] *)")!;
		}
		return this._balanceToken1;
	}
	private _tradeResult?: HTMLSpanElement;
	get tradeResult() {
		if (this._tradeResult === undefined) {
			this._tradeResult = this._element.querySelector("[ace-ref=\"trade-result\"]:not(:not(:scope)[is] *)")!;
		}
		return this._tradeResult;
	}
}
export class FarmPoolDepositDialogAutogen extends HTMLDialogElement {
	readonly refs: FarmPoolDepositDialogRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				(document.getElementById("ace-template-farm-pool-deposit-dialog") as HTMLTemplateElement)
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "farm-pool-deposit-dialog"); // allow for easy query selecting
		this.refs = new FarmPoolDepositDialogRefs(this);
	}
	public static registerElement() {
		customElements.define("farm-pool-deposit-dialog", this, { extends: "dialog"});
	}
}
export class FarmPoolWithdrawDialogRefs {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _formDeposit?: HTMLFormElementKnownControls<FarmPoolWithdrawDialogFormCollection2, FarmPoolWithdrawDialogFormValues2>;
	get formDeposit() {
		if (this._formDeposit === undefined) {
			this._formDeposit = this._element.querySelector("[ace-ref=\"form-deposit\"]:not(:not(:scope)[is] *)")!;
			this._formDeposit.values = normalizeFormValues.bind(this._formDeposit, this._formDeposit);
		}
		return this._formDeposit;
	}
	private _denom?: HTMLSpanElement;
	get denom() {
		if (this._denom === undefined) {
			this._denom = this._element.querySelector("[ace-ref=\"denom\"]:not(:not(:scope)[is] *)")!;
		}
		return this._denom;
	}
	private _balance?: HTMLSpanElement;
	get balance() {
		if (this._balance === undefined) {
			this._balance = this._element.querySelector("[ace-ref=\"balance\"]:not(:not(:scope)[is] *)")!;
		}
		return this._balance;
	}
	private _tradeResult?: HTMLSpanElement;
	get tradeResult() {
		if (this._tradeResult === undefined) {
			this._tradeResult = this._element.querySelector("[ace-ref=\"trade-result\"]:not(:not(:scope)[is] *)")!;
		}
		return this._tradeResult;
	}
}
export class FarmPoolWithdrawDialogAutogen extends HTMLDialogElement {
	readonly refs: FarmPoolWithdrawDialogRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				(document.getElementById("ace-template-farm-pool-withdraw-dialog") as HTMLTemplateElement)
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "farm-pool-withdraw-dialog"); // allow for easy query selecting
		this.refs = new FarmPoolWithdrawDialogRefs(this);
	}
	public static registerElement() {
		customElements.define("farm-pool-withdraw-dialog", this, { extends: "dialog"});
	}
}
export type FarmPoolDepositDialogFormCollection1 = HTMLFormControlsCollection & {
	"amount0": HTMLInputElement;
	namedItem(name: "amount0"): HTMLInputElement;
	"amount1": HTMLInputElement;
	namedItem(name: "amount1"): HTMLInputElement;
};
export type FarmPoolDepositDialogFormValues1 = {
	"amount0": number;
	"amount1": number;
};
export type FarmPoolWithdrawDialogFormCollection2 = HTMLFormControlsCollection & {
	"amount0": HTMLInputElement;
	namedItem(name: "amount0"): HTMLInputElement;
};
export type FarmPoolWithdrawDialogFormValues2 = {
	"amount0": number;
};
interface HTMLFormElementKnownControls<C extends HTMLFormControlsCollection, V> extends HTMLFormElement {
	readonly elements: C;
	values: () => V;
};

// TODO: Make this part of a util lib instead of part of the autogen
export function normalizeFormValues(source: HTMLFormElement | SubmitEvent): any {
	const result: any = {};
	const [formElement, submitter] = (() => {
		if (source instanceof HTMLFormElement) {
			return [source, null];
		}
		return [source.target as HTMLFormElement, source.submitter];
	})();
	for (let i = 0; i < formElement.elements.length; i += 1) {
		const formControl = formElement.elements[i];
		if (formControl instanceof HTMLButtonElement) {
			if (formControl == submitter) {
				if (formControl.name) {
					result[formControl.name] = formControl.value;
				}
			}
		}else if (formControl instanceof HTMLInputElement) {
			switch(formControl.type) {
				case "checkbox": {
					result[formControl.name] = formControl.checked;
					break;
				}
				case "datetime-local": {
					result[formControl.name] = formControl.valueAsDate;
					break;
				}
				case "file": {
					result[formControl.name] = formControl.files;
					break;
				}
				case "number":
				case "range": {
					result[formControl.name] = formControl.valueAsNumber;
					break;
				}
				case "radio": {
					if (formControl.checked) {
						result[formControl.name] = formControl.value;
						break;
					}
				}
				default:
					result[formControl.name] = formControl.value;
			}
		}else if (
			formControl instanceof HTMLOutputElement ||
			formControl instanceof HTMLSelectElement ||
			formControl instanceof HTMLTextAreaElement
		) {
			result[formControl.name] = formControl.value;
		}
	}
	return result;
}
