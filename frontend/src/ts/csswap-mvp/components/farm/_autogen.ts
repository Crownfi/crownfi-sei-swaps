// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
export class FarmPoolComponentRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#bigChestTvl?: HTMLSpanElement;
	get bigChestTvl() {
		if (this.#bigChestTvl === undefined) {
			this.#bigChestTvl = this.#element.querySelector("[cewt-ref=\"big-chest-tvl\"]:not(:scope [is] *)")!;
		}
		return this.#bigChestTvl;
	}
	#bigChestTotalTraded?: HTMLSpanElement;
	get bigChestTotalTraded() {
		if (this.#bigChestTotalTraded === undefined) {
			this.#bigChestTotalTraded = this.#element.querySelector("[cewt-ref=\"big-chest-total-traded\"]:not(:scope [is] *)")!;
		}
		return this.#bigChestTotalTraded;
	}
	#bigChestVolume24H?: HTMLSpanElement;
	get bigChestVolume24H() {
		if (this.#bigChestVolume24H === undefined) {
			this.#bigChestVolume24H = this.#element.querySelector("[cewt-ref=\"big-chest-volume-24h\"]:not(:scope [is] *)")!;
		}
		return this.#bigChestVolume24H;
	}
	#allPoolBtn?: HTMLButtonElement;
	get allPoolBtn() {
		if (this.#allPoolBtn === undefined) {
			this.#allPoolBtn = this.#element.querySelector("[cewt-ref=\"all-pool-btn\"]:not(:scope [is] *)")!;
		}
		return this.#allPoolBtn;
	}
	#myPoolBtn?: HTMLButtonElement;
	get myPoolBtn() {
		if (this.#myPoolBtn === undefined) {
			this.#myPoolBtn = this.#element.querySelector("[cewt-ref=\"my-pool-btn\"]:not(:scope [is] *)")!;
		}
		return this.#myPoolBtn;
	}
	#poolSearchText?: HTMLInputElement;
	get poolSearchText() {
		if (this.#poolSearchText === undefined) {
			this.#poolSearchText = this.#element.querySelector("[cewt-ref=\"pool-search-text\"]:not(:scope [is] *)")!;
		}
		return this.#poolSearchText;
	}
	#poolList?: HTMLDivElement;
	get poolList() {
		if (this.#poolList === undefined) {
			this.#poolList = this.#element.querySelector("[cewt-ref=\"pool-list\"]:not(:scope [is] *)")!;
		}
		return this.#poolList;
	}
}
let _templateFarmPoolComponent: HTMLTemplateElement | null = null;
function getFarmPoolComponentTemplate(): HTMLTemplateElement {
	if (_templateFarmPoolComponent == null) {
		 _templateFarmPoolComponent = document.getElementById("cewt-template-farm-pool-component") as HTMLTemplateElement;
	}
	return _templateFarmPoolComponent;
}
export class FarmPoolComponentAutogen extends HTMLDivElement {
	readonly refs: FarmPoolComponentRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getFarmPoolComponentTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "farm-pool-component"); // allow for easy query selecting
		this.refs = new FarmPoolComponentRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("farm-pool-component", this, { extends: "div"});
	}
}
export class FarmPoolItemRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#btnStar?: HTMLButtonElement;
	get btnStar() {
		if (this.#btnStar === undefined) {
			this.#btnStar = this.#element.querySelector("[cewt-ref=\"btn-star\"]:not(:scope [is] *)")!;
		}
		return this.#btnStar;
	}
	#iconToken0?: HTMLImageElement;
	get iconToken0() {
		if (this.#iconToken0 === undefined) {
			this.#iconToken0 = this.#element.querySelector("[cewt-ref=\"icon-token0\"]:not(:scope [is] *)")!;
		}
		return this.#iconToken0;
	}
	#iconToken1?: HTMLImageElement;
	get iconToken1() {
		if (this.#iconToken1 === undefined) {
			this.#iconToken1 = this.#element.querySelector("[cewt-ref=\"icon-token1\"]:not(:scope [is] *)")!;
		}
		return this.#iconToken1;
	}
	#poolName?: HTMLDivElement;
	get poolName() {
		if (this.#poolName === undefined) {
			this.#poolName = this.#element.querySelector("[cewt-ref=\"pool-name\"]:not(:scope [is] *)")!;
		}
		return this.#poolName;
	}
	#totalDeposits?: HTMLDivElement;
	get totalDeposits() {
		if (this.#totalDeposits === undefined) {
			this.#totalDeposits = this.#element.querySelector("[cewt-ref=\"total-deposits\"]:not(:scope [is] *)")!;
		}
		return this.#totalDeposits;
	}
	#volume24H?: HTMLDivElement;
	get volume24H() {
		if (this.#volume24H === undefined) {
			this.#volume24H = this.#element.querySelector("[cewt-ref=\"volume-24h\"]:not(:scope [is] *)")!;
		}
		return this.#volume24H;
	}
	#feeRate?: HTMLDivElement;
	get feeRate() {
		if (this.#feeRate === undefined) {
			this.#feeRate = this.#element.querySelector("[cewt-ref=\"fee-rate\"]:not(:scope [is] *)")!;
		}
		return this.#feeRate;
	}
	#apy?: HTMLDivElement;
	get apy() {
		if (this.#apy === undefined) {
			this.#apy = this.#element.querySelector("[cewt-ref=\"apy\"]:not(:scope [is] *)")!;
		}
		return this.#apy;
	}
	#userDeposits?: HTMLDivElement;
	get userDeposits() {
		if (this.#userDeposits === undefined) {
			this.#userDeposits = this.#element.querySelector("[cewt-ref=\"user-deposits\"]:not(:scope [is] *)")!;
		}
		return this.#userDeposits;
	}
	#userNet?: HTMLDivElement;
	get userNet() {
		if (this.#userNet === undefined) {
			this.#userNet = this.#element.querySelector("[cewt-ref=\"user-net\"]:not(:scope [is] *)")!;
		}
		return this.#userNet;
	}
	#btnExpand?: HTMLButtonElement;
	get btnExpand() {
		if (this.#btnExpand === undefined) {
			this.#btnExpand = this.#element.querySelector("[cewt-ref=\"btn-expand\"]:not(:scope [is] *)")!;
		}
		return this.#btnExpand;
	}
}
let _templateFarmPoolItem: HTMLTemplateElement | null = null;
function getFarmPoolItemTemplate(): HTMLTemplateElement {
	if (_templateFarmPoolItem == null) {
		 _templateFarmPoolItem = document.getElementById("cewt-template-farm-pool-item") as HTMLTemplateElement;
	}
	return _templateFarmPoolItem;
}
export class FarmPoolItemAutogen extends HTMLDivElement {
	readonly refs: FarmPoolItemRefs;
	static get observedAttributes() {
		return ["pool"];
	}
	#attributePoolValue: string | null = null;
	get pool(): string | null {
		return this.#attributePoolValue;
	}
	set pool(v: string | null) {
		if (v == null) {
			this.removeAttribute("pool");
		}else{
			this.setAttribute("pool", v);
		}
	}
	protected onPoolChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "pool":
				this.#attributePoolValue = newValue;
				this.onPoolChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getFarmPoolItemTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "farm-pool-item"); // allow for easy query selecting
		this.refs = new FarmPoolItemRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("farm-pool-item", this, { extends: "div"});
	}
}
export class FarmPoolItemOptionsRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#depositTxt?: HTMLSpanElement;
	get depositTxt() {
		if (this.#depositTxt === undefined) {
			this.#depositTxt = this.#element.querySelector("[cewt-ref=\"deposit-txt\"]:not(:scope [is] *)")!;
		}
		return this.#depositTxt;
	}
	#depositBtn?: HTMLButtonElement;
	get depositBtn() {
		if (this.#depositBtn === undefined) {
			this.#depositBtn = this.#element.querySelector("[cewt-ref=\"deposit-btn\"]:not(:scope [is] *)")!;
		}
		return this.#depositBtn;
	}
	#withdrawTxt?: HTMLSpanElement;
	get withdrawTxt() {
		if (this.#withdrawTxt === undefined) {
			this.#withdrawTxt = this.#element.querySelector("[cewt-ref=\"withdraw-txt\"]:not(:scope [is] *)")!;
		}
		return this.#withdrawTxt;
	}
	#withdrawBtn?: HTMLButtonElement;
	get withdrawBtn() {
		if (this.#withdrawBtn === undefined) {
			this.#withdrawBtn = this.#element.querySelector("[cewt-ref=\"withdraw-btn\"]:not(:scope [is] *)")!;
		}
		return this.#withdrawBtn;
	}
}
let _templateFarmPoolItemOptions: HTMLTemplateElement | null = null;
function getFarmPoolItemOptionsTemplate(): HTMLTemplateElement {
	if (_templateFarmPoolItemOptions == null) {
		 _templateFarmPoolItemOptions = document.getElementById("cewt-template-farm-pool-item-options") as HTMLTemplateElement;
	}
	return _templateFarmPoolItemOptions;
}
export class FarmPoolItemOptionsAutogen extends HTMLDivElement {
	readonly refs: FarmPoolItemOptionsRefs;
	static get observedAttributes() {
		return ["pool"];
	}
	#attributePoolValue: string | null = null;
	get pool(): string | null {
		return this.#attributePoolValue;
	}
	set pool(v: string | null) {
		if (v == null) {
			this.removeAttribute("pool");
		}else{
			this.setAttribute("pool", v);
		}
	}
	protected onPoolChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "pool":
				this.#attributePoolValue = newValue;
				this.onPoolChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getFarmPoolItemOptionsTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "farm-pool-item-options"); // allow for easy query selecting
		this.refs = new FarmPoolItemOptionsRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("farm-pool-item-options", this, { extends: "div"});
	}
}
export class FarmPoolDepositDialogRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#form?: HTMLFormElementKnownControls<FarmPoolDepositDialogFormCollection1, FarmPoolDepositDialogFormValues1>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form);
		}
		return this.#form;
	}
	#denomToken0?: HTMLSpanElement;
	get denomToken0() {
		if (this.#denomToken0 === undefined) {
			this.#denomToken0 = this.#element.querySelector("[cewt-ref=\"denom-token0\"]:not(:scope [is] *)")!;
		}
		return this.#denomToken0;
	}
	#balanceToken0?: HTMLSpanElement;
	get balanceToken0() {
		if (this.#balanceToken0 === undefined) {
			this.#balanceToken0 = this.#element.querySelector("[cewt-ref=\"balance-token0\"]:not(:scope [is] *)")!;
		}
		return this.#balanceToken0;
	}
	#denomToken1?: HTMLSpanElement;
	get denomToken1() {
		if (this.#denomToken1 === undefined) {
			this.#denomToken1 = this.#element.querySelector("[cewt-ref=\"denom-token1\"]:not(:scope [is] *)")!;
		}
		return this.#denomToken1;
	}
	#balanceToken1?: HTMLSpanElement;
	get balanceToken1() {
		if (this.#balanceToken1 === undefined) {
			this.#balanceToken1 = this.#element.querySelector("[cewt-ref=\"balance-token1\"]:not(:scope [is] *)")!;
		}
		return this.#balanceToken1;
	}
	#denomResult?: HTMLSpanElement;
	get denomResult() {
		if (this.#denomResult === undefined) {
			this.#denomResult = this.#element.querySelector("[cewt-ref=\"denom-result\"]:not(:scope [is] *)")!;
		}
		return this.#denomResult;
	}
	#balanceResult?: HTMLSpanElement;
	get balanceResult() {
		if (this.#balanceResult === undefined) {
			this.#balanceResult = this.#element.querySelector("[cewt-ref=\"balance-result\"]:not(:scope [is] *)")!;
		}
		return this.#balanceResult;
	}
	#btnCancel?: HTMLButtonElement;
	get btnCancel() {
		if (this.#btnCancel === undefined) {
			this.#btnCancel = this.#element.querySelector("[cewt-ref=\"btn-cancel\"]:not(:scope [is] *)")!;
		}
		return this.#btnCancel;
	}
}
let _templateFarmPoolDepositDialog: HTMLTemplateElement | null = null;
function getFarmPoolDepositDialogTemplate(): HTMLTemplateElement {
	if (_templateFarmPoolDepositDialog == null) {
		 _templateFarmPoolDepositDialog = document.getElementById("cewt-template-farm-pool-deposit-dialog") as HTMLTemplateElement;
	}
	return _templateFarmPoolDepositDialog;
}
export class FarmPoolDepositDialogAutogen extends HTMLDialogElement {
	readonly refs: FarmPoolDepositDialogRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getFarmPoolDepositDialogTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "farm-pool-deposit-dialog"); // allow for easy query selecting
		this.refs = new FarmPoolDepositDialogRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("farm-pool-deposit-dialog", this, { extends: "dialog"});
	}
}
export class FarmPoolWithdrawDialogRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#form?: HTMLFormElementKnownControls<FarmPoolWithdrawDialogFormCollection2, FarmPoolWithdrawDialogFormValues2>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form);
		}
		return this.#form;
	}
	#denom?: HTMLSpanElement;
	get denom() {
		if (this.#denom === undefined) {
			this.#denom = this.#element.querySelector("[cewt-ref=\"denom\"]:not(:scope [is] *)")!;
		}
		return this.#denom;
	}
	#balance?: HTMLSpanElement;
	get balance() {
		if (this.#balance === undefined) {
			this.#balance = this.#element.querySelector("[cewt-ref=\"balance\"]:not(:scope [is] *)")!;
		}
		return this.#balance;
	}
	#tradeResult?: HTMLSpanElement;
	get tradeResult() {
		if (this.#tradeResult === undefined) {
			this.#tradeResult = this.#element.querySelector("[cewt-ref=\"trade-result\"]:not(:scope [is] *)")!;
		}
		return this.#tradeResult;
	}
	#btnCancel?: HTMLButtonElement;
	get btnCancel() {
		if (this.#btnCancel === undefined) {
			this.#btnCancel = this.#element.querySelector("[cewt-ref=\"btn-cancel\"]:not(:scope [is] *)")!;
		}
		return this.#btnCancel;
	}
}
let _templateFarmPoolWithdrawDialog: HTMLTemplateElement | null = null;
function getFarmPoolWithdrawDialogTemplate(): HTMLTemplateElement {
	if (_templateFarmPoolWithdrawDialog == null) {
		 _templateFarmPoolWithdrawDialog = document.getElementById("cewt-template-farm-pool-withdraw-dialog") as HTMLTemplateElement;
	}
	return _templateFarmPoolWithdrawDialog;
}
export class FarmPoolWithdrawDialogAutogen extends HTMLDialogElement {
	readonly refs: FarmPoolWithdrawDialogRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getFarmPoolWithdrawDialogTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "farm-pool-withdraw-dialog"); // allow for easy query selecting
		this.refs = new FarmPoolWithdrawDialogRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("farm-pool-withdraw-dialog", this, { extends: "dialog"});
	}
}
export type FarmPoolDepositDialogFormCollection1 = HTMLFormControlsCollection & {
	"amount0": HTMLInputElement;
	namedItem(name: "amount0"): HTMLInputElement;
	"amount1": HTMLInputElement;
	namedItem(name: "amount1"): HTMLInputElement;
	"result": HTMLInputElement;
	namedItem(name: "result"): HTMLInputElement;
	"pool": HTMLInputElement;
	namedItem(name: "pool"): HTMLInputElement;
};
export type FarmPoolDepositDialogFormValues1 = {
	"amount0": number;
	"amount1": number;
	"result": number;
	"pool": string;
};
export type FarmPoolWithdrawDialogFormCollection2 = HTMLFormControlsCollection & {
	"amount": HTMLInputElement;
	namedItem(name: "amount"): HTMLInputElement;
	"pool": HTMLInputElement;
	namedItem(name: "pool"): HTMLInputElement;
};
export type FarmPoolWithdrawDialogFormValues2 = {
	"amount": number;
	"pool": string;
};
interface HTMLFormElementKnownControls<C extends HTMLFormControlsCollection, V> extends HTMLFormElement {
	readonly elements: C;
	values: () => V;
};

// TODO: Make this part of a util lib instead of part of the autogen
export function normalizeFormValues(source: HTMLFormElement | SubmitEvent): any {
	const result: any = {};
	const [formElement, submitter] = (() => {
		if (source instanceof HTMLFormElement) {
			return [source, null];
		}
		return [source.target as HTMLFormElement, source.submitter];
	})();
	for (let i = 0; i < formElement.elements.length; i += 1) {
		const formControl = formElement.elements[i];
		if (formControl instanceof HTMLButtonElement) {
			if (formControl == submitter) {
				if (formControl.name) {
					result[formControl.name] = formControl.value;
				}
			}
		}else if (formControl instanceof HTMLInputElement) {
			switch(formControl.type) {
				case "checkbox": {
					result[formControl.name] = formControl.checked;
					break;
				}
				case "datetime-local": {
					result[formControl.name] = formControl.valueAsDate;
					break;
				}
				case "file": {
					result[formControl.name] = formControl.files;
					break;
				}
				case "number":
				case "range": {
					result[formControl.name] = formControl.valueAsNumber;
					break;
				}
				case "radio": {
					if (formControl.checked) {
						result[formControl.name] = formControl.value;
						break;
					}
				}
				default:
					result[formControl.name] = formControl.value;
			}
		}else if (
			formControl instanceof HTMLOutputElement ||
			formControl instanceof HTMLSelectElement ||
			formControl instanceof HTMLTextAreaElement
		) {
			result[formControl.name] = formControl.value;
		}
	}
	return result;
}
