// auto-generated by acetewm
// DO NOT EDIT BY HAND!!
export class FarmComponentSlots {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _title?: HTMLHeadingElement;
	get title() {
		if (this._title === undefined) {
			this._title = this._element.querySelector("[slot=\"title\"]") ?? document.createElement("h2");
			this._title.slot = "title";
			this._element.appendChild(this._title);
		}
		return this._title;
	}
	private _denomToken0?: HTMLSpanElement;
	get denomToken0() {
		if (this._denomToken0 === undefined) {
			this._denomToken0 = this._element.querySelector("[slot=\"denom-token0\"]") ?? document.createElement("span");
			this._denomToken0.slot = "denom-token0";
			this._element.appendChild(this._denomToken0);
		}
		return this._denomToken0;
	}
	private _balanceToken0?: HTMLSpanElement;
	get balanceToken0() {
		if (this._balanceToken0 === undefined) {
			this._balanceToken0 = this._element.querySelector("[slot=\"balance-token0\"]") ?? document.createElement("span");
			this._balanceToken0.slot = "balance-token0";
			this._element.appendChild(this._balanceToken0);
		}
		return this._balanceToken0;
	}
	private _denomToken1?: HTMLSpanElement;
	get denomToken1() {
		if (this._denomToken1 === undefined) {
			this._denomToken1 = this._element.querySelector("[slot=\"denom-token1\"]") ?? document.createElement("span");
			this._denomToken1.slot = "denom-token1";
			this._element.appendChild(this._denomToken1);
		}
		return this._denomToken1;
	}
	private _balanceToken1?: HTMLSpanElement;
	get balanceToken1() {
		if (this._balanceToken1 === undefined) {
			this._balanceToken1 = this._element.querySelector("[slot=\"balance-token1\"]") ?? document.createElement("span");
			this._balanceToken1.slot = "balance-token1";
			this._element.appendChild(this._balanceToken1);
		}
		return this._balanceToken1;
	}
	private _denomLpToken?: HTMLSpanElement;
	get denomLpToken() {
		if (this._denomLpToken === undefined) {
			this._denomLpToken = this._element.querySelector("[slot=\"denom-lp-token\"]") ?? document.createElement("span");
			this._denomLpToken.slot = "denom-lp-token";
			this._element.appendChild(this._denomLpToken);
		}
		return this._denomLpToken;
	}
	private _balanceLpToken?: HTMLSpanElement;
	get balanceLpToken() {
		if (this._balanceLpToken === undefined) {
			this._balanceLpToken = this._element.querySelector("[slot=\"balance-lp-token\"]") ?? document.createElement("span");
			this._balanceLpToken.slot = "balance-lp-token";
			this._element.appendChild(this._balanceLpToken);
		}
		return this._balanceLpToken;
	}
}
export class FarmComponentRefs {
	private _element: HTMLElement;
	constructor(element: HTMLElement) {
		this._element = element;
	}
	private _formDeposit?: HTMLFormElementKnownControls<FarmComponentFormCollection1, FarmComponentFormValues1>;
	get formDeposit() {
		if (this._formDeposit === undefined) {
			this._formDeposit = this._element.shadowRoot!.querySelector("[ace-ref=\"form-deposit\"]")!;
			this._formDeposit.values = normalizeFormValues.bind(this._formDeposit, this._formDeposit);
		}
		return this._formDeposit;
	}
	private _depositBtn?: HTMLButtonElement;
	get depositBtn() {
		if (this._depositBtn === undefined) {
			this._depositBtn = this._element.shadowRoot!.querySelector("[ace-ref=\"deposit-btn\"]")!;
		}
		return this._depositBtn;
	}
	private _formWithdraw?: HTMLFormElementKnownControls<FarmComponentFormCollection2, FarmComponentFormValues2>;
	get formWithdraw() {
		if (this._formWithdraw === undefined) {
			this._formWithdraw = this._element.shadowRoot!.querySelector("[ace-ref=\"form-withdraw\"]")!;
			this._formWithdraw.values = normalizeFormValues.bind(this._formWithdraw, this._formWithdraw);
		}
		return this._formWithdraw;
	}
	private _withdrawBtn?: HTMLButtonElement;
	get withdrawBtn() {
		if (this._withdrawBtn === undefined) {
			this._withdrawBtn = this._element.shadowRoot!.querySelector("[ace-ref=\"withdraw-btn\"]")!;
		}
		return this._withdrawBtn;
	}
}
export class FarmComponentAutogen extends HTMLElement {
	readonly slots: FarmComponentSlots;
	readonly refs: FarmComponentRefs;
	constructor() {
		super();
		const shadowRoot = this.attachShadow({ mode: "open" });
		shadowRoot.appendChild(
			(document.getElementById("ace-template-farm-component") as HTMLTemplateElement)
				.content
				.cloneNode(true)
		);
		this.slots = new FarmComponentSlots(this);
		this.refs = new FarmComponentRefs(this);
	}
	public static registerElement() {
		customElements.define("farm-component", this);
	}
}
export type FarmComponentFormCollection1 = HTMLFormControlsCollection & {
	"amount0": HTMLInputElement;
	namedItem(name: "amount0"): HTMLInputElement;
	"amount1": HTMLInputElement;
	namedItem(name: "amount1"): HTMLInputElement;
};
export type FarmComponentFormValues1 = {
	"amount0": number;
	"amount1": number;
};
export type FarmComponentFormCollection2 = HTMLFormControlsCollection & {
	"amount": HTMLInputElement;
	namedItem(name: "amount"): HTMLInputElement;
};
export type FarmComponentFormValues2 = {
	"amount": number;
};
interface HTMLFormElementKnownControls<C extends HTMLFormControlsCollection, V> extends HTMLFormElement {
	readonly elements: C;
	values: () => V;
};

// TODO: Make this part of a util lib instead of part of the autogen
export function normalizeFormValues(source: HTMLFormElement | SubmitEvent): any {
	const result: any = {};
	const [formElement, submitter] = (() => {
		if (source instanceof HTMLFormElement) {
			return [source, null];
		}
		return [source.target as HTMLFormElement, source.submitter];
	})();
	for (let i = 0; i < formElement.elements.length; i += 1) {
		const formControl = formElement.elements[i];
		if (formControl instanceof HTMLButtonElement) {
			if (formControl == submitter) {
				if (formControl.name) {
					result[formControl.name] = formControl.value;
				}
			}
		}else if (formControl instanceof HTMLInputElement) {
			switch(formControl.type) {
				case "checkbox": {
					result[formControl.name] = formControl.checked;
					break;
				}
				case "datetime-local": {
					result[formControl.name] = formControl.valueAsDate;
					break;
				}
				case "file": {
					result[formControl.name] = formControl.files;
					break;
				}
				case "number":
				case "range": {
					result[formControl.name] = formControl.valueAsNumber;
					break;
				}
				case "radio": {
					if (formControl.checked) {
						result[formControl.name] = formControl.value;
						break;
					}
				}
				default:
					result[formControl.name] = formControl.value;
			}
		}else if (
			formControl instanceof HTMLOutputElement ||
			formControl instanceof HTMLSelectElement ||
			formControl instanceof HTMLTextAreaElement
		) {
			result[formControl.name] = formControl.value;
		}
	}
	return result;
}
