/* eslint-disable */
/**
 * This file was automatically generated by crownfi-sei-sdk-autogen.
 * DO NOT MODIFY IT BY HAND.
 * The Rust definition of the associated structs is the source of truth!!
 */
import {
	Addr,
	ArraySize_2Of_Coin,
	ArraySize_2Of_String,
	Binary,
	Decimal,
	PoolPairCalcNaiveSwapResult,
	PoolPairCalcSwapResult,
	PoolPairConfigJsonable,
	PoolPairExecuteMsg,
	PoolPairQueryMsg,
	PoolPairQuerySimulateDepositResponse,
	String,
	Uint128,
	VolumeQueryResponse,
} from "./types.js";
import { Coin } from "@cosmjs/amino";
import { ExecuteInstruction } from "@cosmjs/cosmwasm-stargate";
import { ContractBase } from "@crownfi/sei-utils";
export class PoolPairContract extends ContractBase {
	queryPairDenoms(): Promise<ArraySize_2Of_String> {
		const msg = "pair_denoms" satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	queryCanonicalPairDenoms(): Promise<ArraySize_2Of_String> {
		const msg = "canonical_pair_denoms" satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	queryPairIdentifier(): Promise<String> {
		const msg = "pair_identifier" satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	queryCanonicalPairIdentifier(): Promise<String> {
		const msg = "canonical_pair_identifier" satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	queryConfig(): Promise<PoolPairConfigJsonable> {
		const msg = "config" satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	queryTotalShares(): Promise<Uint128> {
		const msg = "total_shares" satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	queryShareValue(args: { amount: Uint128 }): Promise<ArraySize_2Of_Coin> {
		const msg = { share_value: args } satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	querySimulateProvideLiquidity(args: { offer: [Coin, Coin] }): Promise<PoolPairQuerySimulateDepositResponse> {
		const msg = { simulate_provide_liquidity: args } satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	querySimulateSwap(args: { offer: Coin }): Promise<PoolPairCalcSwapResult> {
		const msg = { simulate_swap: args } satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	querySimulateNaiveSwap(args: { offer: Coin }): Promise<PoolPairCalcNaiveSwapResult> {
		const msg = { simulate_naive_swap: args } satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	queryHourlyVolumeSum(args: { past_hours?: number | null } = {}): Promise<VolumeQueryResponse> {
		const msg = { hourly_volume_sum: args } satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	queryDailyVolumeSum(args: { past_days?: number | null } = {}): Promise<VolumeQueryResponse> {
		const msg = { daily_volume_sum: args } satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	queryTotalVolumeSum(): Promise<VolumeQueryResponse> {
		const msg = "total_volume_sum" satisfies PoolPairQueryMsg;
		return this.query(msg);
	}
	buildUpdateConfigIx(
		args: {
			admin?: Addr | null;
			endorsed?: boolean | null;
			fee_receiver?: Addr | null;
			maker_fee_bps?: number | null;
			total_fee_bps?: number | null;
		} = {},
		funds?: Coin[]
	): ExecuteInstruction {
		const msg = { update_config: args } satisfies PoolPairExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildProvideLiquidityIx(
		args: { receiver?: Addr | null; receiver_payload?: Binary | null; slippage_tolerance?: Decimal | null } = {},
		funds?: Coin[]
	): ExecuteInstruction {
		const msg = { provide_liquidity: args } satisfies PoolPairExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildWithdrawLiquidityIx(
		args: { receiver?: Addr | null; receiver_payload?: Binary | null } = {},
		funds?: Coin[]
	): ExecuteInstruction {
		const msg = { withdraw_liquidity: args } satisfies PoolPairExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildWithdrawAndSplitLiquidityIx(
		args: {
			left_coin_receiver?: Addr | null;
			left_coin_receiver_payload?: Binary | null;
			right_coin_receiver?: Addr | null;
			right_coin_receiver_payload?: Binary | null;
		} = {},
		funds?: Coin[]
	): ExecuteInstruction {
		const msg = { withdraw_and_split_liquidity: args } satisfies PoolPairExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildSwapIx(
		args: {
			expected_result?: Uint128 | null;
			receiver?: Addr | null;
			receiver_payload?: Binary | null;
			slippage_tolerance?: Decimal | null;
		} = {},
		funds?: Coin[]
	): ExecuteInstruction {
		const msg = { swap: args } satisfies PoolPairExecuteMsg;
		return this.executeIx(msg, funds);
	}
}
