/* eslint-disable */
/**
 * This file was automatically generated by crownfi-sei-sdk-autogen.
 * DO NOT MODIFY IT BY HAND.
 * The Rust definition of the associated structs is the source of truth!!
 */
import {
	Addr,
	ArrayOf_PoolFactoryCreatedPair,
	Nullable_Addr,
	PoolFactoryConfigJsonable,
	PoolFactoryExecuteMsg,
	PoolFactoryQueryMsg,
} from "./types.js";
import { Coin } from "@cosmjs/amino";
import { ExecuteInstruction } from "@cosmjs/cosmwasm-stargate";
import { ContractBase } from "@crownfi/sei-utils";
export class PoolFactoryContract extends ContractBase {
	queryConfig(): Promise<PoolFactoryConfigJsonable> {
		const msg = { config: {} } satisfies PoolFactoryQueryMsg;
		return this.query(msg);
	}
	queryPairAddr(args: { pair: [string, string] }): Promise<Nullable_Addr> {
		const msg = { pair_addr: args } satisfies PoolFactoryQueryMsg;
		return this.query(msg);
	}
	queryPairs(
		args: { after?: [string, string]; limit?: number | null } = {}
	): Promise<ArrayOf_PoolFactoryCreatedPair> {
		const msg = { pairs: args } satisfies PoolFactoryQueryMsg;
		return this.query(msg);
	}
	buildUpdateConfigIx(
		args: {
			admin?: Addr | null;
			default_maker_fee_bps?: number | null;
			default_total_fee_bps?: number | null;
			fee_receiver?: Addr | null;
			pair_code_id?: number | null;
			permissionless_pool_cration?: boolean | null;
		} = {},
		funds?: Coin[]
	): ExecuteInstruction {
		const msg = { update_config: args } satisfies PoolFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildCreatePoolIx(
		args: { initial_shares_receiver?: Addr | null; left_denom: string },
		funds?: Coin[]
	): ExecuteInstruction {
		const msg = { create_pool: args } satisfies PoolFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildUpdateFeesForPoolIx(
		args: { maker_fee_bps?: number | null; pair: [string, string]; total_fee_bps?: number | null },
		funds?: Coin[]
	): ExecuteInstruction {
		const msg = { update_fees_for_pool: args } satisfies PoolFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	buildUpdateGlobalConfigForPoolIx(
		args: { after?: [string, string]; limit?: number | null } = {},
		funds?: Coin[]
	): ExecuteInstruction {
		const msg = { update_global_config_for_pool: args } satisfies PoolFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
}
