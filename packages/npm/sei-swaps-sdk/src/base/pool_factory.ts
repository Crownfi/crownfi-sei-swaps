/* eslint-disable */
/**
 * This file was automatically generated by crownfi-sei-sdk-autogen.
 * DO NOT MODIFY IT BY HAND.
 * The Rust definition of the associated structs is the source of truth!!
 */
import {Addr, ArrayOf_PoolFactoryCreatedPair, Binary, Nullable_Addr, PoolFactoryConfigJsonable, PoolFactoryExecuteMsg, PoolFactoryQueryMsg} from "./types.js";
import {Coin} from "@cosmjs/amino";
import {ExecuteInstruction, WasmExtension} from "@cosmjs/cosmwasm-stargate";
import {QueryClient} from "@cosmjs/stargate";
import {ContractBase} from "@crownfi/sei-utils";
export class PoolFactoryContract<Q extends QueryClient & WasmExtension> extends ContractBase<Q> {
	/** Config returns contract settings specified in the custom [`ConfigResponse`] structure. */
	queryConfig(): Promise<PoolFactoryConfigJsonable> {
		const msg = "config" satisfies PoolFactoryQueryMsg;
		return this.query(msg);
	}
	/** Gets the contract address for a pair. The result may include the inverse pair if it exists. */
	queryPairAddr(args: {
		"pair": [string, string]
	}): Promise<Nullable_Addr> {
		const msg = {"pair_addr": args} satisfies PoolFactoryQueryMsg;
		return this.query(msg);
	}
	/** Pairs returns an array of pairs and their information according to the specified parameters in `start_after` and `limit` variables. */
	queryPairs(args: {
		"after"?: [string, string],
		"limit"?: number | null
	} = {}): Promise<ArrayOf_PoolFactoryCreatedPair> {
		const msg = {"pairs": args} satisfies PoolFactoryQueryMsg;
		return this.query(msg);
	}
	/** UpdateConfig updates relevant code IDs */
	buildUpdateConfigIx(args: {
		/** The head honcho */
		"admin"?: Addr | null,
		/** The amount of fees (in bps) collected by the Maker contract from this pair type */
		"default_maker_fee_bps"?: number | null,
		/** The total fees (in bps) charged by a pair of this type */
		"default_total_fee_bps"?: number | null,
		/** Where to put the maker fees, set to "sei1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq703fpu" to disable. */
		"fee_receiver"?: Addr | null,
		/** Code to use when instantiating new pool pairs */
		"pair_code_id"?: number | null,
		/** If true, everyone will be able to create new trading pairs */
		"permissionless_pool_cration"?: boolean | null
	} = {}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"update_config": args} satisfies PoolFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	/** CreatePool instantiates a new pair pool contract. The pair is determined by the initial liquidity funds sent to this contract */
	buildCreatePoolIx(args: {
		"initial_shares_receiver"?: Addr | null,
		/** As funds must be given in alphabetical order, this is used to determine whether or not the pair should be inversed when presented to the user */
		"left_denom": string
	}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"create_pool": args} satisfies PoolFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	/** Sets the specified trading pair to have the specified fees. */
	buildUpdateFeesForPoolIx(args: {
		/** The maker fee, where 10000 is 100%. Must be less than `total_fee_bps`. */
		"maker_fee_bps"?: number | null,
		/** The trading pair to change. The associated pool contract must have already been created. */
		"pair": [string, string],
		/** The total fee, where 10000 is 100%. This value subtracted by `total_fee_bps` will be the pool fee. */
		"total_fee_bps"?: number | null
	}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"update_fees_for_pool": args} satisfies PoolFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	/** Syncs the non-fee-amount configuration options for all pools.

Currently this only syncs the maker fee receiver. */
	buildUpdateGlobalConfigForPoolIx(args: {
		/** Pool pair config is updated in lexicographical order. If you need to execute this instruction accross multiple transactions, this is where you can specify to pick up where you left off. */
		"after"?: [string, string],
		/** The limit amount of pools to update, by default, all pools will be updated. */
		"limit"?: number | null
	} = {}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"update_global_config_for_pool": args} satisfies PoolFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	/** Upgrades the specified pool pair to the `pair_code_id` as specified in this contract's config. */
	buildUpdatePoolCodeIx(args: {
		"pair": [string, string],
		"payload"?: Binary | null
	}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"update_pool_code": args} satisfies PoolFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
}
