/* eslint-disable */
/**
 * This file was automatically generated by crownfi-sei-sdk-autogen.
 * DO NOT MODIFY IT BY HAND.
 * The Rust definition of the associated structs is the source of truth!!
 */
import {ArrayOf_AstroPairType, AssetInfo, AstroFactoryConfigResponse, AstroFactoryExecuteMsg, AstroFactoryFeeInfoResponse, AstroFactoryPairConfig, AstroFactoryPairsResponse, AstroFactoryQueryMsg, AstroPairType, Binary, PairInfo} from "./types.js";
import {Coin} from "@cosmjs/amino";
import {ExecuteInstruction, WasmExtension} from "@cosmjs/cosmwasm-stargate";
import {QueryClient} from "@cosmjs/stargate";
import {ContractBase} from "@crownfi/sei-utils";
export class AstroFactoryContract<Q extends QueryClient & WasmExtension> extends ContractBase<Q> {
	/** Config returns contract settings specified in the custom [`ConfigResponse`] structure. */
	queryConfig(): Promise<AstroFactoryConfigResponse> {
		const msg = {"config": {}} satisfies AstroFactoryQueryMsg;
		return this.query(msg);
	}
	/** Pair returns information about a specific pair according to the specified assets. */
	queryPair(args: {
		/** The assets for which we return a pair */
		"asset_infos": AssetInfo[]
	}): Promise<PairInfo> {
		const msg = {"pair": args} satisfies AstroFactoryQueryMsg;
		return this.query(msg);
	}
	/** Pairs returns an array of pairs and their information according to the specified parameters in `start_after` and `limit` variables. */
	queryPairs(args: {
		/** The number of pairs to read and return. It is an [`Option`] type. */
		"limit"?: number | null,
		/** The pair item to start reading from. It is an [`Option`] type that accepts [`AssetInfo`] elements. */
		"start_after"?: AssetInfo[]
	} = {}): Promise<AstroFactoryPairsResponse> {
		const msg = {"pairs": args} satisfies AstroFactoryQueryMsg;
		return this.query(msg);
	}
	/** FeeInfo returns fee parameters for a specific pair. The response is returned using a [`FeeInfoResponse`] structure */
	queryFeeInfo(args: {
		/** The pair type for which we return fee information. Pair type is a [`PairType`] struct */
		"pair_type": AstroPairType
	}): Promise<AstroFactoryFeeInfoResponse> {
		const msg = {"fee_info": args} satisfies AstroFactoryQueryMsg;
		return this.query(msg);
	}
	/** Returns a vector that contains blacklisted pair types */
	queryBlacklistedPairTypes(): Promise<ArrayOf_AstroPairType> {
		const msg = {"blacklisted_pair_types": {}} satisfies AstroFactoryQueryMsg;
		return this.query(msg);
	}
	/** UpdateConfig updates relevant code IDs */
	buildUpdateConfigIx(args: {
		/** Contract address to send governance fees to (the Maker) */
		"fee_address"?: string | null,
		/** Whether to prevent the public from creating pairs */
		"permissioned"?: boolean | null,
		/** CW20 token contract code identifier */
		"token_code_id"?: number | null
	} = {}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"update_config": args} satisfies AstroFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	/** UpdatePairConfig updates the config for a pair type. */
	buildUpdatePairConfigIx(args: {
		/** New [`PairConfig`] settings for a pair type */
		"config": AstroFactoryPairConfig
	}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"update_pair_config": args} satisfies AstroFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	/** CreatePair instantiates a new pair contract. */
	buildCreatePairIx(args: {
		/** The assets to create the pool for */
		"asset_infos": AssetInfo[],
		/** Optional binary serialised parameters for custom pool types */
		"init_params"?: Binary | null,
		/** The pair type (exposed in [`PairType`]) */
		"pair_type": AstroPairType
	}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"create_pair": args} satisfies AstroFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	/** Deregister removes a previously created pair. */
	buildDeregisterIx(args: {
		/** The assets for which we deregister a pool */
		"asset_infos": AssetInfo[]
	}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"deregister": args} satisfies AstroFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	/** ProposeNewOwner creates a proposal to change contract ownership. The validity period for the proposal is set in the `expires_in` variable. */
	buildProposeNewOwnerIx(args: {
		/** The date after which this proposal expires */
		"expires_in": number,
		/** Newly proposed contract owner */
		"owner": string
	}, funds?: Coin[]): ExecuteInstruction {
		const msg = {"propose_new_owner": args} satisfies AstroFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	/** DropOwnershipProposal removes the existing offer to change contract ownership. */
	buildDropOwnershipProposalIx(funds?: Coin[]): ExecuteInstruction {
		const msg = {"drop_ownership_proposal": {}} satisfies AstroFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
	/** Used to claim contract ownership. */
	buildClaimOwnershipIx(funds?: Coin[]): ExecuteInstruction {
		const msg = {"claim_ownership": {}} satisfies AstroFactoryExecuteMsg;
		return this.executeIx(msg, funds);
	}
}
