// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
export class PopupModalRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#heading?: HTMLHeadingElement;
	get heading() {
		if (this.#heading === undefined) {
			this.#heading = this.#element.querySelector('[cewt-ref="heading"]:not(:scope [is] *)')!;
		}
		return this.#heading;
	}
	#message?: HTMLParagraphElement;
	get message() {
		if (this.#message === undefined) {
			this.#message = this.#element.querySelector('[cewt-ref="message"]:not(:scope [is] *)')!;
		}
		return this.#message;
	}
	#dismissBtn?: HTMLButtonElement;
	get dismissBtn() {
		if (this.#dismissBtn === undefined) {
			this.#dismissBtn = this.#element.querySelector('[cewt-ref="dismiss-btn"]:not(:scope [is] *)')!;
		}
		return this.#dismissBtn;
	}
}
let _templatePopupModal: HTMLTemplateElement | null = null;
function getPopupModalTemplate(): HTMLTemplateElement {
	if (_templatePopupModal == null) {
		_templatePopupModal = document.createElement("template");
		_templatePopupModal.innerHTML =
			'\n\t<h1 cewt-ref="heading">null</h1>\n\t<p cewt-ref="message">null</p>\n\t<button cewt-ref="dismiss-btn">OK</button>\n';
	}
	return _templatePopupModal;
}
export class PopupModalAutogen extends HTMLDialogElement {
	readonly refs: PopupModalRefs;
	static get observedAttributes() {
		return ["heading", "message"];
	}
	#attributeHeadingValue: string | null = null;
	get heading(): string | null {
		return this.#attributeHeadingValue;
	}
	set heading(v: string | null) {
		if (v == null) {
			this.removeAttribute("heading");
		} else {
			this.setAttribute("heading", v);
		}
	}
	protected onHeadingChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeMessageValue: string | null = null;
	get message(): string | null {
		return this.#attributeMessageValue;
	}
	set message(v: string | null) {
		if (v == null) {
			this.removeAttribute("message");
		} else {
			this.setAttribute("message", v);
		}
	}
	protected onMessageChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch (name) {
			case "heading":
				this.#attributeHeadingValue = newValue;
				this.onHeadingChanged(oldValue, newValue);
				break;
			case "message":
				this.#attributeMessageValue = newValue;
				this.onMessageChanged(oldValue, newValue);
				break;
			default:
			// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(getPopupModalTemplate().content.cloneNode(true));
		}
		this.setAttribute("is", "popup-modal"); // allow for easy query selecting
		this.refs = new PopupModalRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("popup-modal", this, { extends: "dialog" });
	}
}
export class ErrorModalRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#heading?: HTMLHeadingElement;
	get heading() {
		if (this.#heading === undefined) {
			this.#heading = this.#element.querySelector('[cewt-ref="heading"]:not(:scope [is] *)')!;
		}
		return this.#heading;
	}
	#message?: HTMLParagraphElement;
	get message() {
		if (this.#message === undefined) {
			this.#message = this.#element.querySelector('[cewt-ref="message"]:not(:scope [is] *)')!;
		}
		return this.#message;
	}
	#errorDetails?: HTMLTextAreaElement;
	get errorDetails() {
		if (this.#errorDetails === undefined) {
			this.#errorDetails = this.#element.querySelector('[cewt-ref="error-details"]:not(:scope [is] *)')!;
		}
		return this.#errorDetails;
	}
	#dismissBtn?: HTMLButtonElement;
	get dismissBtn() {
		if (this.#dismissBtn === undefined) {
			this.#dismissBtn = this.#element.querySelector('[cewt-ref="dismiss-btn"]:not(:scope [is] *)')!;
		}
		return this.#dismissBtn;
	}
}
let _templateErrorModal: HTMLTemplateElement | null = null;
function getErrorModalTemplate(): HTMLTemplateElement {
	if (_templateErrorModal == null) {
		_templateErrorModal = document.createElement("template");
		_templateErrorModal.innerHTML =
			'\n\t<h1 cewt-ref="heading">null</h1>\n\t<p cewt-ref="message">null</p>\n\t<textarea readonly="" cewt-ref="error-details"></textarea>\n\t<button cewt-ref="dismiss-btn">OK</button>\n';
	}
	return _templateErrorModal;
}
export class ErrorModalAutogen extends HTMLDialogElement {
	readonly refs: ErrorModalRefs;
	static get observedAttributes() {
		return ["message", "details", "heading"];
	}
	#attributeMessageValue: string | null = null;
	get message(): string | null {
		return this.#attributeMessageValue;
	}
	set message(v: string | null) {
		if (v == null) {
			this.removeAttribute("message");
		} else {
			this.setAttribute("message", v);
		}
	}
	protected onMessageChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeDetailsValue: string | null = null;
	get details(): string | null {
		return this.#attributeDetailsValue;
	}
	set details(v: string | null) {
		if (v == null) {
			this.removeAttribute("details");
		} else {
			this.setAttribute("details", v);
		}
	}
	protected onDetailsChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeHeadingValue: string | null = null;
	get heading(): string | null {
		return this.#attributeHeadingValue;
	}
	set heading(v: string | null) {
		if (v == null) {
			this.removeAttribute("heading");
		} else {
			this.setAttribute("heading", v);
		}
	}
	protected onHeadingChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch (name) {
			case "message":
				this.#attributeMessageValue = newValue;
				this.onMessageChanged(oldValue, newValue);
				break;
			case "details":
				this.#attributeDetailsValue = newValue;
				this.onDetailsChanged(oldValue, newValue);
				break;
			case "heading":
				this.#attributeHeadingValue = newValue;
				this.onHeadingChanged(oldValue, newValue);
				break;
			default:
			// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(getErrorModalTemplate().content.cloneNode(true));
		}
		this.setAttribute("is", "error-modal"); // allow for easy query selecting
		this.refs = new ErrorModalRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("error-modal", this, { extends: "dialog" });
	}
}
export class TxConfirmedModalRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#txLink?: HTMLAnchorElement;
	get txLink() {
		if (this.#txLink === undefined) {
			this.#txLink = this.#element.querySelector('[cewt-ref="tx-link"]:not(:scope [is] *)')!;
		}
		return this.#txLink;
	}
	#dismissBtn?: HTMLButtonElement;
	get dismissBtn() {
		if (this.#dismissBtn === undefined) {
			this.#dismissBtn = this.#element.querySelector('[cewt-ref="dismiss-btn"]:not(:scope [is] *)')!;
		}
		return this.#dismissBtn;
	}
}
let _templateTxConfirmedModal: HTMLTemplateElement | null = null;
function getTxConfirmedModalTemplate(): HTMLTemplateElement {
	if (_templateTxConfirmedModal == null) {
		_templateTxConfirmedModal = document.createElement("template");
		_templateTxConfirmedModal.innerHTML =
			'\n\t<h1>Transaction confirmed</h1>\n\t<p>Your transaction has been successfully processed.</p>\n\t<p><a target="_blank" cewt-ref="tx-link" href="https://www.seiscan.app/">You may view its details here.</a></p>\n\t<button cewt-ref="dismiss-btn">OK</button>\n';
	}
	return _templateTxConfirmedModal;
}
export class TxConfirmedModalAutogen extends HTMLDialogElement {
	readonly refs: TxConfirmedModalRefs;
	static get observedAttributes() {
		return ["txhash", "chain"];
	}
	#attributeTxhashValue: string | null = null;
	get txhash(): string | null {
		return this.#attributeTxhashValue;
	}
	set txhash(v: string | null) {
		if (v == null) {
			this.removeAttribute("txhash");
		} else {
			this.setAttribute("txhash", v);
		}
	}
	protected onTxhashChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeChainValue: string | null = null;
	get chain(): string | null {
		return this.#attributeChainValue;
	}
	set chain(v: string | null) {
		if (v == null) {
			this.removeAttribute("chain");
		} else {
			this.setAttribute("chain", v);
		}
	}
	protected onChainChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch (name) {
			case "txhash":
				this.#attributeTxhashValue = newValue;
				this.onTxhashChanged(oldValue, newValue);
				break;
			case "chain":
				this.#attributeChainValue = newValue;
				this.onChainChanged(oldValue, newValue);
				break;
			default:
			// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(getTxConfirmedModalTemplate().content.cloneNode(true));
		}
		this.setAttribute("is", "tx-confirmed-modal"); // allow for easy query selecting
		this.refs = new TxConfirmedModalRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("tx-confirmed-modal", this, { extends: "dialog" });
	}
}
