// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
import { TokenDisplayElement } from "@crownfi/sei-webui-utils";
export class DepositFormComponentRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#fromDepositAmount?: HTMLInputElement;
	get fromDepositAmount() {
		if (this.#fromDepositAmount === undefined) {
			this.#fromDepositAmount = this.#element.querySelector("[cewt-ref=\"fromDepositAmount\"]:not(:scope [is] *)")!;
		}
		return this.#fromDepositAmount;
	}
	#fromMax?: HTMLButtonElement;
	get fromMax() {
		if (this.#fromMax === undefined) {
			this.#fromMax = this.#element.querySelector("[cewt-ref=\"fromMax\"]:not(:scope [is] *)")!;
		}
		return this.#fromMax;
	}
	#fromBalance?: TokenDisplayElement;
	get fromBalance() {
		if (this.#fromBalance === undefined) {
			this.#fromBalance = this.#element.querySelector("[cewt-ref=\"fromBalance\"]:not(:scope [is] *)")!;
		}
		return this.#fromBalance;
	}
	#toDepositAmount?: HTMLInputElement;
	get toDepositAmount() {
		if (this.#toDepositAmount === undefined) {
			this.#toDepositAmount = this.#element.querySelector("[cewt-ref=\"toDepositAmount\"]:not(:scope [is] *)")!;
		}
		return this.#toDepositAmount;
	}
	#toMax?: HTMLButtonElement;
	get toMax() {
		if (this.#toMax === undefined) {
			this.#toMax = this.#element.querySelector("[cewt-ref=\"toMax\"]:not(:scope [is] *)")!;
		}
		return this.#toMax;
	}
	#toBalance?: TokenDisplayElement;
	get toBalance() {
		if (this.#toBalance === undefined) {
			this.#toBalance = this.#element.querySelector("[cewt-ref=\"toBalance\"]:not(:scope [is] *)")!;
		}
		return this.#toBalance;
	}
	#sharesAmount?: HTMLInputElement;
	get sharesAmount() {
		if (this.#sharesAmount === undefined) {
			this.#sharesAmount = this.#element.querySelector("[cewt-ref=\"sharesAmount\"]:not(:scope [is] *)")!;
		}
		return this.#sharesAmount;
	}
	#submitButton?: HTMLButtonElement;
	get submitButton() {
		if (this.#submitButton === undefined) {
			this.#submitButton = this.#element.querySelector("[cewt-ref=\"submitButton\"]:not(:scope [is] *)")!;
		}
		return this.#submitButton;
	}
}
let _templateDepositFormComponent: HTMLTemplateElement | null = null;
function getDepositFormComponentTemplate(): HTMLTemplateElement {
	if (_templateDepositFormComponent == null) {
		 _templateDepositFormComponent = document.createElement("template")
		 _templateDepositFormComponent.innerHTML = "\n  <div class=\"fantasy-input-group row mt-2\">\n    <span></span>\n    <input type=\"text\" placeholder=\"Deposit amount\" cewt-ref=\"fromDepositAmount\">\n    <button type=\"button\" class=\"button fantasy short\" cewt-ref=\"fromMax\">Max</button>\n  </div>\n  \n  <div class=\"ml-1\">\n    <span class=\"text-neutral-secondary\">\n      Balance:\n      <span is=\"token-display\" cewt-ref=\"fromBalance\" amount=\"0\"></span>\n    </span>\n  </div>\n\n  <div class=\"fantasy-input-group row mt-2\">\n    <span></span>\n    <input type=\"text\" placeholder=\"Deposit amount\" cewt-ref=\"toDepositAmount\">\n    <button type=\"button\" class=\"button fantasy short\" cewt-ref=\"toMax\">Max</button>\n  </div>\n  \n  <div class=\"ml-1\">\n    <span class=\"text-neutral-secondary\">\n      Balance:\n      <span is=\"token-display\" cewt-ref=\"toBalance\" amount=\"0\"></span>\n    </span>\n  </div>\n\n\n  <div class=\"mt-2\">\n    <span class=\"ml-1 text-neutral-secondary\">\n      Shares you will receive:\n    </span>\n    <div class=\"fantasy-input-group\">\n      <input type=\"text\" value=\"0\" readonly=\"\" cewt-ref=\"sharesAmount\">\n    </div>\n\n    <div class=\"px-1 mt-2\">\n      <p class=\"important-note warning\">\n        These values aren\'t guaranteed as other trades may be processed before yours.\n      </p>\n    </div>\n  </div>\n\n  <div class=\"col align-items-center\">\n    <button class=\"mt-2 fantasy-ornamental submit-button\" cewt-ref=\"submitButton\" disabled=\"\">Submit</button>\n  </div>\n";
	}
	return _templateDepositFormComponent;
}
export class DepositFormComponentAutogen extends HTMLFormElement {
	readonly refs: DepositFormComponentRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getDepositFormComponentTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "deposit-form-component"); // allow for easy query selecting
		this.refs = new DepositFormComponentRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("deposit-form-component", this, { extends: "form"});
	}
}
