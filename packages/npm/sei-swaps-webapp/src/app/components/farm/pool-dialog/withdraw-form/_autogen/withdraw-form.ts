// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
import { TokenDisplayElement } from "@crownfi/sei-webui-utils";
export class WithdrawFormComponentRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#sharesAmountInput?: HTMLInputElement;
	get sharesAmountInput() {
		if (this.#sharesAmountInput === undefined) {
			this.#sharesAmountInput = this.#element.querySelector("[cewt-ref=\"sharesAmountInput\"]:not(:scope [is] *)")!;
		}
		return this.#sharesAmountInput;
	}
	#maxButton?: HTMLButtonElement;
	get maxButton() {
		if (this.#maxButton === undefined) {
			this.#maxButton = this.#element.querySelector("[cewt-ref=\"maxButton\"]:not(:scope [is] *)")!;
		}
		return this.#maxButton;
	}
	#sharesBalance?: HTMLSpanElement;
	get sharesBalance() {
		if (this.#sharesBalance === undefined) {
			this.#sharesBalance = this.#element.querySelector("[cewt-ref=\"sharesBalance\"]:not(:scope [is] *)")!;
		}
		return this.#sharesBalance;
	}
	#receiveToken0?: TokenDisplayElement;
	get receiveToken0() {
		if (this.#receiveToken0 === undefined) {
			this.#receiveToken0 = this.#element.querySelector("[cewt-ref=\"receiveToken0\"]:not(:scope [is] *)")!;
		}
		return this.#receiveToken0;
	}
	#receiveToken1?: TokenDisplayElement;
	get receiveToken1() {
		if (this.#receiveToken1 === undefined) {
			this.#receiveToken1 = this.#element.querySelector("[cewt-ref=\"receiveToken1\"]:not(:scope [is] *)")!;
		}
		return this.#receiveToken1;
	}
	#submitButton?: HTMLButtonElement;
	get submitButton() {
		if (this.#submitButton === undefined) {
			this.#submitButton = this.#element.querySelector("[cewt-ref=\"submitButton\"]:not(:scope [is] *)")!;
		}
		return this.#submitButton;
	}
}
let _templateWithdrawFormComponent: HTMLTemplateElement | null = null;
function getWithdrawFormComponentTemplate(): HTMLTemplateElement {
	if (_templateWithdrawFormComponent == null) {
		 _templateWithdrawFormComponent = document.createElement("template")
		 _templateWithdrawFormComponent.innerHTML = "\n  <div class=\"mt-2\">\n    <span class=\"text-neutral-secondary ml-1\">\n      Shares\n    </span>\n  </div>\n\n  <div class=\"fantasy-input-group row\">\n    <span></span>\n    <input type=\"text\" placeholder=\"0\" cewt-ref=\"sharesAmountInput\">\n    <button type=\"button\" class=\"button fantasy short\" cewt-ref=\"maxButton\">Max</button>\n  </div>\n\n  <div class=\"ml-1\">\n    <span class=\"text-neutral-secondary\">\n      Balance:\n      <span cewt-ref=\"sharesBalance\">0</span>\n    </span>\n  </div>\n\n  <div class=\"mt-2\">\n    <span class=\"ml-1 text-neutral-secondary\">\n      You will receive:\n    </span>\n\n    <div class=\"row gap-1 ml-1\">\n      <span class=\"badge\" is=\"token-display\" amount=\"0\" cewt-ref=\"receiveToken0\"></span>\n      <span class=\"badge\" is=\"token-display\" amount=\"0\" cewt-ref=\"receiveToken1\"></span>\n    </div>\n  </div>\n\n  <div class=\"col align-items-center\">\n    <button class=\"mt-2 fantasy-ornamental submit-button\" cewt-ref=\"submitButton\" disabled=\"\">Submit</button>\n  </div>\n";
	}
	return _templateWithdrawFormComponent;
}
export class WithdrawFormComponentAutogen extends HTMLFormElement {
	readonly refs: WithdrawFormComponentRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getWithdrawFormComponentTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "withdraw-form-component"); // allow for easy query selecting
		this.refs = new WithdrawFormComponentRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("withdraw-form-component", this, { extends: "form"});
	}
}
