// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
export class SwapComponentRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#connectWalletWarning?: HTMLDivElement;
	get connectWalletWarning() {
		if (this.#connectWalletWarning === undefined) {
			this.#connectWalletWarning = this.#element.querySelector("[cewt-ref=\"connect-wallet-warning\"]:not(:scope [is] *)")!;
		}
		return this.#connectWalletWarning;
	}
	#fromToken?: HTMLDivElement;
	get fromToken() {
		if (this.#fromToken === undefined) {
			this.#fromToken = this.#element.querySelector("[cewt-ref=\"from-token\"]:not(:scope [is] *)")!;
		}
		return this.#fromToken;
	}
	#toToken?: HTMLDivElement;
	get toToken() {
		if (this.#toToken === undefined) {
			this.#toToken = this.#element.querySelector("[cewt-ref=\"to-token\"]:not(:scope [is] *)")!;
		}
		return this.#toToken;
	}
	#swapButton?: HTMLButtonElement;
	get swapButton() {
		if (this.#swapButton === undefined) {
			this.#swapButton = this.#element.querySelector("[cewt-ref=\"swap-button\"]:not(:scope [is] *)")!;
		}
		return this.#swapButton;
	}
	#swapButtonSpinner?: HTMLSpanElement;
	get swapButtonSpinner() {
		if (this.#swapButtonSpinner === undefined) {
			this.#swapButtonSpinner = this.#element.querySelector("[cewt-ref=\"swap-button-spinner\"]:not(:scope [is] *)")!;
		}
		return this.#swapButtonSpinner;
	}
}
let _templateSwapComponent: HTMLTemplateElement | null = null;
function getSwapComponentTemplate(): HTMLTemplateElement {
	if (_templateSwapComponent == null) {
		 _templateSwapComponent = document.createElement("template")
		 _templateSwapComponent.innerHTML = "\n  <div class=\"warning-container\">\n    <div class=\"important-note\" cewt-ref=\"connect-wallet-warning\">\n      Connect your wallet to enable swapping\n    </div>\n  </div>\n\n  <div cewt-ref=\"from-token\"></div>\n\n  <button class=\"fantasy-circular arrow\">\n    <span class=\"cicon cicon-size-medium cicon-gradient cicon-fantasy-arrow-down primary\"></span>\n  </button>\n\n  <div cewt-ref=\"to-token\"></div>\n\n  <div class=\"swap-button-container\">\n    <button class=\"fantasy-ornamental primary swap-button\" cewt-ref=\"swap-button\" disabled=\"\">\n      SWAP\n    </button>\n\n    <span class=\"loading-spinner-inline text-xlarge\" cewt-ref=\"swap-button-spinner\" style=\"display: none;\"></span>\n  </div>\n";
	}
	return _templateSwapComponent;
}
export class SwapComponentAutogen extends HTMLDivElement {
	readonly refs: SwapComponentRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getSwapComponentTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "swap-component"); // allow for easy query selecting
		this.refs = new SwapComponentRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("swap-component", this, { extends: "div"});
	}
}
