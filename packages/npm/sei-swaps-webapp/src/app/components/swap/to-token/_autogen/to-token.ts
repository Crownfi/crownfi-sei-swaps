// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
export class SwapToComponentRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#slippageAmount?: HTMLSpanElement;
	get slippageAmount() {
		if (this.#slippageAmount === undefined) {
			this.#slippageAmount = this.#element.querySelector("[cewt-ref=\"slippage-amount\"]:not(:scope [is] *)")!;
		}
		return this.#slippageAmount;
	}
	#dropdown?: HTMLButtonElement;
	get dropdown() {
		if (this.#dropdown === undefined) {
			this.#dropdown = this.#element.querySelector("[cewt-ref=\"dropdown\"]:not(:scope [is] *)")!;
		}
		return this.#dropdown;
	}
	#toAmount?: HTMLInputElement;
	get toAmount() {
		if (this.#toAmount === undefined) {
			this.#toAmount = this.#element.querySelector("[cewt-ref=\"to-amount\"]:not(:scope [is] *)")!;
		}
		return this.#toAmount;
	}
}
let _templateSwapToComponent: HTMLTemplateElement | null = null;
function getSwapToComponentTemplate(): HTMLTemplateElement {
	if (_templateSwapToComponent == null) {
		 _templateSwapToComponent = document.createElement("template")
		 _templateSwapToComponent.innerHTML = "\n  <div class=\"labels-row\">\n    <span>To:</span>\n    <div>\n      Slippage: <span cewt-ref=\"slippage-amount\">0</span>\n    </div>\n  </div>\n\n  <div class=\"fantasy-input-group\">\n    <button is=\"token-dropdown-component\" id=\"to-token-dropdown\" cewt-ref=\"dropdown\"></button>\n\n    <input cewt-ref=\"to-amount\" type=\"number\" value=\"0\" disabled=\"\">\n  </div>\n";
	}
	return _templateSwapToComponent;
}
export class SwapToComponentAutogen extends HTMLDivElement {
	readonly refs: SwapToComponentRefs;
	static get observedAttributes() {
		return ["amount", "slippage", "token", "tokens"];
	}
	#attributeAmountValue: string | null = null;
	get amount(): string | null {
		return this.#attributeAmountValue;
	}
	set amount(v: string | null) {
		if (v == null) {
			this.removeAttribute("amount");
		}else{
			this.setAttribute("amount", v);
		}
	}
	protected onAmountChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeSlippageValue: string | null = null;
	get slippage(): string | null {
		return this.#attributeSlippageValue;
	}
	set slippage(v: string | null) {
		if (v == null) {
			this.removeAttribute("slippage");
		}else{
			this.setAttribute("slippage", v);
		}
	}
	protected onSlippageChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeTokenValue: string | null = null;
	get token(): string | null {
		return this.#attributeTokenValue;
	}
	set token(v: string | null) {
		if (v == null) {
			this.removeAttribute("token");
		}else{
			this.setAttribute("token", v);
		}
	}
	protected onTokenChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeTokensValue: string | null = null;
	get tokens(): string | null {
		return this.#attributeTokensValue;
	}
	set tokens(v: string | null) {
		if (v == null) {
			this.removeAttribute("tokens");
		}else{
			this.setAttribute("tokens", v);
		}
	}
	protected onTokensChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "amount":
				this.#attributeAmountValue = newValue;
				this.onAmountChanged(oldValue, newValue);
				break;
			case "slippage":
				this.#attributeSlippageValue = newValue;
				this.onSlippageChanged(oldValue, newValue);
				break;
			case "token":
				this.#attributeTokenValue = newValue;
				this.onTokenChanged(oldValue, newValue);
				break;
			case "tokens":
				this.#attributeTokensValue = newValue;
				this.onTokensChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getSwapToComponentTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "swap-to-component"); // allow for easy query selecting
		this.refs = new SwapToComponentRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("swap-to-component", this, { extends: "div"});
	}
}
